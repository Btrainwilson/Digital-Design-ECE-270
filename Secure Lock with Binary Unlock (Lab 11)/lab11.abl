MODULE isp4256ZEio

TITLE 'isp4256ZE Development Board I/O Configuration'

" Target CPLD is ispMACH LC4256ZE 144-pin TQFP (LC4256ZE-5TN144C)

LIBRARY 'lattice';

DECLARATIONS

" Internal Oscillator

osc_dis, osc_rst, osc_out, tmr_out node istype 'com';

" Use maximum possible internal divisor -> yields approx 4 Hz output frequency

XLAT_OSCTIMER(DYNOSCDIS, TIMERRES, OSCOUT, TIMEROUT, 1048576);

" Input pins from DIP switch
" DOWN - contact closure to ground - logic 0
" UP - open contact pulled high with resistor - logic 1

DIP0 pin 79;	"IO_K6
DIP1 pin 78;	"IO_K8
DIP2 pin 77;	"IO_K10
DIP3 pin 76;	"IO_K12
DIP4 pin 23;	"IO_E6
DIP5 pin 24;	"IO_E8
DIP6 pin 25;	"IO_E10
DIP7 pin 26;	"IO_E12

DIP = [DIP7, DIP6, DIP5, DIP4, DIP3, DIP2, DIP1, DIP0];

" SPDT toggle switches (can be used to create bounceless switches) 
" ACTIVE LOW (contact closure to ground, with pull-up)
!S1_NC pin 58;	"IO_I2   normally closed (down position)
!S1_NO pin 59;	"IO_I4   normally open (up position)
!S2_NC pin 60;	"IO_I6   normally closed (down position)
!S2_NO pin 61;	"IO_I8   normally open (up position)

" Top row of red LEDs

!LED0 pin 40 istype 'com';	"IO_G10  right-most
!LED1 pin 39 istype 'com';	"IO_G12
!LED2 pin 33 istype 'com';	"IO_F12
!LED3 pin 32 istype 'com'; 	"IO_F10
!LED4 pin 31 istype 'com';	"IO_F8
!LED5 pin 30 istype 'com';	"IO_F6
!LED6 pin 29 istype 'com';	"IO_F4
!LED7 pin 28 istype 'com';	"IO_F2   left-most

TOPRED = [LED7, LED6, LED5, LED4, LED3, LED2, LED1, LED0];

" Second row (from top) of red LEDs

!LED8 pin 139 istype 'com';	"IO_B4   right-most
!LED9 pin 138 istype 'com';	"IO_B2
!LED10 pin 135 istype 'com';	"IO_A12	
!LED11 pin 134 istype 'com';	"IO_A10
!LED12 pin 133 istype 'com';	"IO_A8
!LED13 pin 132 istype 'com';	"IO_A6
!LED14 pin 131 istype 'com';	"IO_A4
!LED15 pin 130 istype 'com';	"IO_A2   left-most

MIDRED = [LED15, LED14, LED13, LED12, LED11, LED10, LED9, LED8];

" 7-segment common-anode displays (active low outputs)
" Right-most display (DIS1)

!DIS1a pin 87 istype 'com';	"IO_L6
!DIS1b pin 86 istype 'com';	"IO_L8
!DIS1c pin 85 istype 'com';	"IO_L10
!DIS1d pin 84 istype 'com';	"IO_L12
!DIS1e pin 83 istype 'com';	"IO_L14
!DIS1f pin 81 istype 'com';	"IO_K2
!DIS1g pin 80 istype 'com';	"IO_K4

DIS1 = [DIS1a, DIS1b, DIS1c, DIS1d, DIS1e, DIS1f, DIS1g];

" Second-from-right display (DIS2)

!DIS2a pin 98 istype 'com';	"IO_M12
!DIS2b pin 97 istype 'com';	"IO_M10
!DIS2c pin 96 istype 'com';	"IO_M8
!DIS2d pin 95 istype 'com';	"IO_M6
!DIS2e pin 94 istype 'com';	"IO_M4
!DIS2f pin 93 istype 'com';	"IO_M2
!DIS2g pin 88 istype 'com';	"IO_L4

DIS2 = [DIS2a, DIS2b, DIS2c, DIS2d, DIS2e, DIS2f, DIS2g];

" Second-from-left display (DIS3)

!DIS3a pin 125 istype 'com';	"IO_P2
!DIS3b pin 124 istype 'com';	"IO_P4
!DIS3c pin 123 istype 'com';	"IO_P6
!DIS3d pin 122 istype 'com';  "IO_P8
!DIS3e pin 121 istype 'com';	"IO_P10
!DIS3f pin 120 istype 'com';	"IO_P12
!DIS3g pin 116 istype 'com';	"IO_O2

DIS3 = [DIS3a, DIS3b, DIS3c, DIS3d, DIS3e, DIS3f, DIS3g];

" Left-most display (DIS4)

!DIS4a pin 44 istype 'com';	"IO_G2
!DIS4b pin 48 istype 'com';	"IO_H12
!DIS4c pin 49 istype 'com';	"IO_H10
!DIS4d pin 50 istype 'com';	"IO_H8
!DIS4e pin 51 istype 'com';	"IO_H6
!DIS4f pin 52 istype 'com'; 	"IO_H4
!DIS4g pin 53 istype 'com';	"IO_H2

DIS4 = [DIS4a, DIS4b, DIS4c, DIS4d, DIS4e, DIS4f, DIS4g];

" Jumbo R-Y-G LEDs
!LED16 pin 140 istype 'com';	"IO_B6   RED
!LED17 pin 141 istype 'com';	"IO_B8   YELLOW
!LED18 pin 142 istype 'com';	"IO_B10  GREEN
!LED19 pin 143 istype 'com';	"IO_B12  (unpopulated)

" Bottom row of red LEDs

!LED20 pin 100 istype 'com';	"IO_N2   right-most
!LED21 pin 101 istype 'com';	"IO_N4
!LED22 pin 102 istype 'com';	"IO_N6
!LED23 pin 103 istype 'com';	"IO_N8
!LED24 pin 104 istype 'com';	"IO_N10
!LED25 pin 105 istype 'com';	"IO_N12
!LED26 pin 111 istype 'com';	"IO_O12
!LED27 pin 112 istype 'com';	"IO_O10  left-most

BOTRED = [LED27, LED26, LED25, LED24, LED23, LED22, LED21, LED20];

" Yellow LEDs next to toggle switches
!LED28 pin 63 istype 'com';	"IO_I12  right
!LED29 pin 62 istype 'com';	"IO_I10  left

" 7-segment alphanumeric display code declarations
blank = [0,0,0,0,0,0,0];  " blank (all off)
char0 = [1,1,1,1,1,1,0];  " 0
char1 = [0,1,1,0,0,0,0];  " 1
char2 = [1,1,0,1,1,0,1];  " 2
char3 = [1,1,1,1,0,0,1];  " 3
char4 = [0,1,1,0,0,1,1];  " 4
char5 = [1,0,1,1,0,1,1];  " 5
char6 = [1,0,1,1,1,1,1];  " 6
char7 = [1,1,1,0,0,0,0];  " 7
char8 = [1,1,1,1,1,1,1];  " 8
char9 = [1,1,1,1,0,1,1];  " 9
charA = [1,1,1,0,1,1,1];  " A
charB = [0,0,1,1,1,1,1];  " b
charC = [1,0,0,1,1,1,0];  " C
charD = [0,1,1,1,1,0,1];  " d
charE = [1,0,0,1,1,1,1];  " E
charF = [1,0,0,0,1,1,1];  " F
charG = [1,1,1,1,0,1,1];  " g
charH = [0,1,1,0,1,1,1];  " H
charI = [0,0,1,0,0,0,0];  " i
charJ = [0,1,1,1,0,0,0];  " J
charL = [0,0,0,1,1,1,0];  " L
charN = [0,0,1,0,1,0,1];  " n
charO = [0,0,1,1,1,0,1];  " o
charP = [1,1,0,0,1,1,1];  " P
charR = [0,0,0,0,1,0,1];  " r
charS = [1,0,1,1,0,1,1];  " S
charU = [0,1,1,1,1,1,0];  " U
charY = [0,1,1,1,0,1,1];  " y	

" User-defined variables follow

predivide node istype 'reg_d,buffer';
postdivide node istype 'reg_d,buffer';

//Bounceless Switch
Switch node istype 'reg';

//Q Terms For LED State Diagrams
Q0..Q3 node istype 'reg';
QALL = [Q3..Q0];

//LED States
LES0 = [0, 0, 0, 0];
LES1 = [0, 0, 0, 1];
LES2 = [0, 0, 1, 0];
LES3 = [0, 0, 1, 1];
LES4 = [0, 1, 0, 0];
LES5 = [0, 1, 0, 1];
LES6 = [0, 1, 1, 0];
LES7 = [0, 1, 1, 1];
LES8 = [1, 0, 0, 0];
LES9 = [1, 0, 0, 1];
LES10 = [1, 0, 1, 0];

//P Terms For Display Shift State Diagrams
P0..P3 node istype 'reg';
PALL = [P3..P0];

//Display Shifts
DS0 = [0, 0, 0, 0];
DS1 = [0, 0, 0, 1];
DS2 = [0, 0, 1, 0];
DS3 = [0, 0, 1, 1];
DS4 = [0, 1, 0, 0];
DS5 = [0, 1, 0, 1];
DS6 = [0, 1, 1, 0];
DS7 = [0, 1, 1, 1];
DS8 = [1, 0, 0, 0];
DS9 = [1, 0, 0, 1];
DS10 = [1, 0, 1, 0];
DS11 = [1, 0, 1, 1];
DS12 = [1, 1, 0, 0];
DS13 = [1, 1, 0, 1];
DS14 = [1, 1, 1, 0];
DS15 = [1, 1, 1, 1];

"Variables for Generater
LFSR0..LFSR7 node istype 'reg';

"Ring Counter Variables
RCO0..RCO7 node istype 'reg';

//Red LED Status
RED_CUR node istype 'com';
RED_LED_STATUS node istype 'reg';

"Initialize Display 1 as COM
DISPL1a, DISPL1b, DISPL1c, DISPL1d, DISPL1e, DISPL1f, DISPL1g node istype 'com';

"Initialize Displays
DISPL2a, DISPL2b, DISPL2c, DISPL2d, DISPL2e, DISPL2f, DISPL2g, DISPL3a, DISPL3b, DISPL3c, DISPL3d, DISPL3e, DISPL3f, DISPL3g,DISPL4a, DISPL4b, DISPL4c, DISPL4d, DISPL4e, DISPL4f, DISPL4g node istype 'reg';

"Group Displays Together
DISPL1ALL = [DISPL1a, DISPL1b, DISPL1c, DISPL1d, DISPL1e, DISPL1f, DISPL1g];

DISPL2ALL = [DISPL2a, DISPL2b, DISPL2c, DISPL2d, DISPL2e, DISPL2f, DISPL2g];

DISPL3ALL = [DISPL3a, DISPL3b, DISPL3c, DISPL3d, DISPL3e, DISPL3f, DISPL3g];

DISPL4ALL = [DISPL4a, DISPL4b, DISPL4c, DISPL4d, DISPL4e, DISPL4f, DISPL4g];


" Note - these should all be declared as NODES (*not* PINS)


" ======================= START OF EQUATIONS SECTION =================================

EQUATIONS

" Internal oscillator setup (disable/enable and reset variables) and OSCTIMER instance

osc_dis = 0;
osc_rst = 0;

I1 OSCTIMER(osc_dis, osc_rst, osc_out, tmr_out);

" User-defined equations, clocked-operator tables, and/or state diagram definitions follow

"Psuedo LFSR Generater
LFSR0 := (DIP0 & LFSR4$LFSR3$LFSR2$LFSR0) # (!DIP0 & LFSR0);
LFSR1 := (DIP0 & LFSR0) # (!DIP0 & LFSR1);
LFSR2 := (DIP0 & LFSR1) # (!DIP0 & LFSR2);
LFSR3 := (DIP0 & LFSR2) # (!DIP0 & LFSR3);
LFSR4 := (DIP0 & LFSR3) # (!DIP0 & LFSR4);
LFSR5 := (DIP0 & LFSR4) # (!DIP0 & LFSR5);
LFSR6 := (DIP0 & LFSR5) # (!DIP0 & LFSR6);
LFSR7 := (DIP0 & LFSR6) # (!DIP0 & LFSR7);

//Set Display
TOPRED = [LFSR7..LFSR0];

//Enable Display
TOPRED.EN = DIP1;

//Set Asynchronous Preset
[LFSR0..LFSR7].AP = DIP7;

"Divided by 4 Clock (1Hz)
predivide := !predivide;
predivide.CLK = tmr_out;

postdivide := !postdivide;
postdivide.CLK = predivide;

"Set Clock to 1 hertz
[LFSR0..LFSR7].CLK = postdivide;

//----------Ring Counter System----------

//8 Bit Ring Counter
RCO7 := (!LED18 & RCO6) # (LED18 & RCO7);
RCO6 := (!LED18 & RCO5) # (LED18 & RCO6);
RCO5 := (!LED18 & RCO4) # (LED18 & RCO5);
RCO4 := (!LED18 & RCO3) # (LED18 & RCO4);
RCO3 := (!LED18 & RCO2) # (LED18 & RCO3);
RCO2 := (!LED18 & RCO1) # (LED18 & RCO2);
RCO1 := (!LED18 & RCO0) # (LED18 & RCO1);
RCO0 := (!LED18 & !(RCO6 # RCO5 # RCO4 # RCO3 # RCO2 # RCO1 # RCO0)) # (LED18 & RCO0);

//Asynchronous Preset First Digit
[RCO0].AP = DIP7;

//Asynchronous Reset Rest
[RCO1..RCO7].AR = DIP7;

//Output Ring Counter
MIDRED = [RCO7..RCO0];

//Create Bounceless Switch for the Clock
Switch.D = 0;
Switch.CLK = 0;
Switch.AP = S1_NO;
Switch.AR = S1_NC;

//Set Counter to Switch
[RCO0..RCO7].CLK = Switch;

//Reset States using DIP7 and Clock with the Switch
[Q0..Q3].AR = DIP7;
[Q0..Q3].CLK = Switch;


//RED FLASHER
RED_LED_STATUS := RED_CUR & !RED_LED_STATUS;
RED_LED_STATUS.CLK = postdivide;
LED16 = RED_LED_STATUS;


//---------Display Shift Register---------

//Set Display Clock and Asynchronous Reset
PALL.CLK = postdivide;
PALL.AR = DIP7;

DISPL2ALL.CLK = postdivide;
DISPL2ALL.AR = DIP7;

DISPL3ALL.CLK = postdivide;
DISPL3ALL.AR = DIP7;

DISPL4ALL.CLK = postdivide;
DISPL4ALL.AR = DIP7;

//Shift Register
DISPL4ALL := DISPL3ALL;
DISPL3ALL := DISPL2ALL;
DISPL2ALL := DISPL1ALL;


//Set Displays
DIS1 = DISPL1ALL;
DIS2 = DISPL2ALL; 
DIS3 = DISPL3ALL;
DIS4 = DISPL4ALL;



//Moore Model State Diagram For Input Matching the Lock
STATE_DIAGRAM QALL

state LES0: if (S2_NO == LFSR0) then LES1

          else LES9;

state LES1: if (S2_NO == LFSR1) then LES2

          else LES9;

state LES2: if (S2_NO == LFSR2) then LES3

          else LES9;

state LES3: if (S2_NO == LFSR3) then LES4

          else LES9;

state LES4: if (S2_NO == LFSR4) then LES5

          else LES9;

state LES5: if (S2_NO == LFSR5) then LES6

          else LES9;

state LES6: if (S2_NO == LFSR6) then LES7

          else LES9;

state LES7: if (S2_NO == LFSR7) then LES8

          else LES9;

state LES8: if (DIP2 == 1) then LES0

          else LES8;

state LES9: goto LES9;

//State Diagram for Displays
STATE_DIAGRAM PALL

state DS0: if (LED17 == 1) then DS1

          else if (LED18 == 1) then DS7

          else DS11;

state DS1: if (LED17 == 1) then DS2

          else DS0;

state DS2: if (LED17 == 1) then DS3

          else DS0;

state DS3: if (LED17 == 1) then DS4

          else DS0;

state DS4: if (LED17 == 1) then DS5

          else DS0;

state DS5: if (LED17 == 1) then DS6

          else DS0;

state DS6: goto DS0;

state DS7: if (LED18 == 1) then DS8

          else DS0;

state DS8: if (LED18 == 1) then DS9

          else DS0;

state DS9: if (LED18 == 1) then DS10

          else DS0;

state DS10: goto DS0;

state DS11: if (RED_CUR == 1) then DS12

          else DS0;

state DS12: if (RED_CUR == 1) then DS13

          else DS0;

state DS13: if (RED_CUR == 1) then DS14

          else DS0;

state DS14: if (RED_CUR == 1) then DS15

          else DS0;

state DS15: goto DS0;

//----------Alarm Status-----------

//Display Shift Register
TRUTH_TABLE ([PALL] -> [DISPL1ALL])
             [DS0]   -> [blank];
             [DS1]   -> [charS];
             [DS2]   -> [charE];
             [DS3]   -> [charC];
             [DS4]   -> [charU];
             [DS5]   -> [charR];
             [DS6]   -> [charE];
             [DS7]   -> [charO];
             [DS8]   -> [charP];
             [DS9]   -> [charE];
             [DS10]  -> [charN];
             [DS11]  -> [charE];
             [DS12]  -> [charR];
             [DS13]  -> [charR];
             [DS14]  -> [charO];
             [DS15]  -> [charR];

//LED Status Register
TRUTH_TABLE ([QALL] -> [LED18, LED17, RED_CUR])
             [LES0] -> [0, 1, 0];
             [LES1] -> [0, 1, 0];
             [LES2] -> [0, 1, 0];
             [LES3] -> [0, 1, 0];
             [LES4] -> [0, 1, 0];
             [LES5] -> [0, 1, 0];
             [LES6] -> [0, 1, 0];
             [LES7] -> [0, 1, 0];
             [LES8] -> [1, 0, 0];
             [LES9] -> [0, 0, 1];


END
